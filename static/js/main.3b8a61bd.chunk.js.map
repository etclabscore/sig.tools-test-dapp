{"version":3,"sources":["themes/theme.ts","translations/kr.ts","i18n.ts","translations/en.ts","translations/cn.ts","lib/sigToolsClient.ts","containers/LanguageMenu/index.tsx","containers/LanguageMenu/LanguageMenu.tsx","lib/postMessageWindowTransport.ts","machines/appMachine.ts","hooks/useCoreGeth.ts","hooks/useServiceRunner.ts","components/NetworkDropdown.tsx","lib/availableServiceToNetwork.ts","components/Account.tsx","containers/MyApp.tsx","index.tsx"],"names":["lightTheme","createMuiTheme","props","MuiAppBar","position","MuiCard","elevation","overrides","root","background","palette","default","darkTheme","type","grey","paper","MuiTable","MuiTypography","color","kr","momentMap","i18n","use","LanguageDetector","initReactI18next","init","resources","en","translation","krJSON","cn","interpolation","escapeValue","format","value","lng","ln","moment","locale","transport","reverseSupportedLanguages","supportedLanguages","LanguageMenu","useTranslation","t","React","anchorEl","setAnchorEl","Tooltip","title","Button","onClick","event","currentTarget","language","Menu","id","keepMounted","open","Boolean","onClose","Object","values","map","lang","i","MenuItem","changeLanguage","handleMenuItemClick","PostMessageWindowTransport","uri","window","frame","urlRegex","Promise","resolve","reject","test","Error","url","height","screen","openPopup","addEventListener","ev","origin","transportRequestManager","resolveResponse","JSON","stringify","data","setTimeout","prom","this","addRequest","undefined","postMessage","request","close","Transport","sigToolsAuth","connect","sign","dataToSign","address","chainId","a","signMessageID","sendData","internalID","jsonrpc","method","params","result","signTypedData","typedData","signTransaction","transaction","signTransactionID","requestPermissions","permissions","requestPermissionID","successPermissions","listAccounts","listAccountsID","accounts","rawAppMachine","initial","context","etherValue","erpc","inProgress","fields","receiver","amount","on","ERPC","target","actions","assign","SEND","SIGN","SIGN_TYPED_DATA","CONNECT","states","idle","meta","page","connecting","waitFor","invoke","src","sigToolsClient","onDone","onError","fetchingAccounts","eth_blockNumber","blockNumber","ps","account","eth_getBalance","balance","all","fetchingChainId","eth_chainId","types","EIP712Domain","name","Person","Mail","primaryType","domain","version","verifyingContract","message","from","wallet","to","contents","signedMessage","signedTypedData","signMessage","stringToHex","sendTransaction","numberToHex","bigIntToHex","BigInt","eth_gasPrice","eth_getTransactionCount","gas","gasPrice","nonce","signedTransaction","eth_sendRawTransaction","then","catch","e","appMachine","createMachine","serviceName","useCoreGeth","serviceRunner","serviceRunnerUrl","env","queryUrlOverride","useState","setErpc","process","REACT_APP_ETH_RPC_URL","urlOverride","setUrlOverride","useEffect","installService","startService","parsedUrl","URL","protocol","split","fallbackPort","port","parseInt","rpc","host","hostname","path","pathname","runAsync","requestManager","useServiceRunner","defaultUrl","setUrl","setServiceRunner","availableServices","setAvailableServices","JadeServiceRunner","listServices","NetworkDropdown","selectedNetwork","setSelectedNetwork","networks","network","selected","Typography","variant","summary","availableServiceToNetwork","availNetworks","availableService","environments","service","concat","Account","Card","CardHeader","CardContent","hexToBigInt","toString","onSend","className","onSign","onSignTypedData","MyApp","darkMode","useDarkMode","theme","setSelectedNetworkState","REACT_APP_SERVICE_RUNNER_URL","setCoreGethUrlOverride","useMachine","devTools","state","send","setNetworks","n","length","handleSignTypedData","handleSign","handleSend","AppBar","Toolbar","Grid","container","alignContent","alignItems","justify","hexToNumber","item","IconButton","toggle","CssBaseline","data-testid","direction","matches","role","aria-label","style","width","overflowX","overflow","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b8a61bd.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const lightTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"#fff !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  palette: {\n    type: \"dark\",\n    background: {\n      default: grey[900],\n      paper: grey[800],\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: grey[400],\n      },\n    },\n  },\n});\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","const kr = {\n  // Moment integration\n  \"Date\": \"{{date, date}}\",\n  // App Bar\n  \"Pristine\": \"Pristine\",\n  \"Change Language\": \"언어 변경\",\n  \"Toggle Dark Mode\": \"블랙모드 변경\",\n  \"Configuration\": \"구성\",\n  \"Back\": \"뒤로\",\n};\nexport default kr;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport enJSON from \"./translations/en\";\nimport krJSON from \"./translations/kr\";\nimport cnJSON from \"./translations/cn\";\nimport moment from \"moment\";\nimport \"moment/locale/ko\";\nimport \"moment/locale/zh-cn\";\nimport \"moment/locale/en-ca\";\nimport i18next from \"i18next\";\n\ninterface IMap {\n  [key: string]: string;\n}\n\nconst momentMap: IMap = {\n  \"kr\": \"ko\",\n  \"cn\": \"zh-cn\",\n  \"en-US\": \"en-ca\",\n};\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources: {\n      en: { translation: enJSON },\n      kr: { translation: krJSON },\n      cn: { translation: cnJSON },\n    },\n    interpolation: {\n      escapeValue: false,\n      format: (value, format, lng) => {\n        if (!lng) {\n          return;\n        }\n        const ln = momentMap[lng];\n        switch (format) {\n          case \"date\":\n            return moment(value).locale(ln || \"en\").format(\"MMMM Do YYYY, h:mm:ss a\") as any;\n          default:\n            break;\n        }\n      },\n    },\n  });\n\nexport const reverseSupportedLanguages: IMap = {\n  \"EN\": \"en-US\", //tslint:disable-line\n  \"中文\": \"cn\", //tslint:disable-line\n  \"한국어\": \"kr\", //tslint:disable-line\n};\n\nexport const supportedLanguages: IMap = {\n  \"en-US\": \"EN\",\n  \"cn\": \"中文\",\n  \"kr\": \"한국어\",\n};\n\nexport const changeLanguage = (l: string) => {\n  return i18next.changeLanguage(l);\n};\n","export default {\n  // Moment integration\n  \"Date\": \"{{date, date}}\",\n  // App Bar\n  \"Pristine\": \"Pristine\",\n  \"Change Language\": \"Change Language\",\n  \"Toggle Dark Mode\": \"Toggle Dark Mode\",\n  \"Configuration\": \"Configuration\",\n  \"Back\": \"Back\",\n};\n","export default {\n  // Moment integration\n  \"Date\": \"{{date, date}}\",\n  // App Bar\n  \"Pristine\": \"Pristine\",\n  \"Change Language\": \"更改语言\",\n  \"Toggle Dark Mode\": \"切换黑暗模式\",\n  \"Configuration\": \"配置\",\n  \"Back\": \"返回\",\n};\n","\nimport PostMessageWindowTransport from \"./postMessageWindowTransport\";\n\nlet transport: PostMessageWindowTransport | undefined;\nlet id = 0;\n\nconst sigToolsAuth = {\n  connect: (url: string) => {\n    transport = new PostMessageWindowTransport(url);\n    return transport.connect();\n  },\n  close: () => {\n    transport?.close();\n  },\n  sign: async (dataToSign: string, address: string, chainId: string) => {\n    const signMessageID = id++;\n    const result = await transport?.sendData({\n      internalID: signMessageID,\n      request: {\n        id: signMessageID,\n        jsonrpc: \"2.0\",\n        method: \"sign\",\n        params: [\n          dataToSign,\n          address,\n          chainId,\n        ],\n      },\n    });\n    return result;\n  },\n  signTypedData: async (typedData: any, address: string, chainId: string) => {\n    const signMessageID = id++;\n    const result = await transport?.sendData({\n      internalID: signMessageID,\n      request: {\n        id: signMessageID,\n        jsonrpc: \"2.0\",\n        method: \"signTypedData\",\n        params: [\n          typedData,\n          address,\n          chainId,\n        ],\n      },\n    });\n    return result;\n  },\n  signTransaction: async (transaction: any, chainId: string) => {\n    const signTransactionID = id++;\n    const result = await transport?.sendData({\n      internalID: signTransactionID,\n      request: {\n        id: signTransactionID,\n        jsonrpc: \"2.0\",\n        method: \"signTransaction\",\n        params: [\n          transaction,\n          chainId,\n        ],\n      },\n    });\n    return result;\n  },\n  requestPermissions: async (permissions: any) => {\n    const requestPermissionID = id++;\n    const successPermissions = await transport?.sendData({\n      internalID: requestPermissionID,\n      request: {\n        id: requestPermissionID,\n        jsonrpc: \"2.0\",\n        method: \"requestPermissions\",\n        params: [permissions],\n      },\n    });\n    return successPermissions;\n  },\n  listAccounts: async () => {\n    const listAccountsID = id++;\n    const accounts = await transport?.sendData({\n      internalID: listAccountsID,\n      request: {\n        id: listAccountsID,\n        jsonrpc: \"2.0\",\n        method: \"listAccounts\",\n        params: [],\n      },\n    });\n    return accounts;\n  },\n};\n\nexport default sigToolsAuth;\n","import LanguageMenu from \"./LanguageMenu\";\nexport default LanguageMenu;\n","import * as React from \"react\";\nimport { Menu, MenuItem, Tooltip, Button } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { supportedLanguages, reverseSupportedLanguages } from \"../../i18n\";\n\nconst LanguageMenu: React.FC = (props) => {\n  const { t, i18n } = useTranslation();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (lang: string) => {\n    setAnchorEl(null);\n    // this forces language change for react + i18n react\n    i18n.changeLanguage(reverseSupportedLanguages[lang]);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Tooltip title={t(\"Change Language\") as string}>\n        <Button onClick={handleClick}>{supportedLanguages[i18n.language]}</Button>\n      </Tooltip>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {Object.values(supportedLanguages).map((lang, i) => (\n          <MenuItem onClick={(event) => handleMenuItemClick(lang)}>{lang}</MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default LanguageMenu;\n","import { Transport } from \"@open-rpc/client-js/build/transports/Transport\";\nimport { JSONRPCRequestData, IJSONRPCData } from \"@open-rpc/client-js/build/Request\";\n\nconst openPopup = (url: string) => {\n  const width = 400;\n  const height = window.screen.height;\n  const left = 0;\n  const top = 0;\n\n  return window.open(\n    url,\n    \"inspector:popup\",\n    `left=${left},top=${top},width=${width},height=${height},resizable,scrollbars=yes,status=1`,\n  );\n};\n\nclass PostMessageWindowTransport extends Transport {\n  public uri: string;\n  public window: any;\n  public frame: undefined | null | Window;\n\n  constructor(uri: string) {\n    super();\n    this.uri = uri;\n  }\n  public connect(): Promise<any> {\n    const urlRegex = /^(http|https):\\/\\/.*$/;\n    return new Promise((resolve, reject) => {\n      if (!urlRegex.test(this.uri)) {\n        reject(new Error(\"Bad URI\"));\n      }\n      this.frame = openPopup(this.uri);\n      window.addEventListener(\"message\", (ev: MessageEvent) => {\n        if (ev.origin === window.origin) {\n          return;\n        }\n        this.transportRequestManager.resolveResponse(JSON.stringify(ev.data));\n      });\n      setTimeout(() => {\n        resolve(true);\n      }, 3000);\n    });\n  }\n\n  public async sendData(data: JSONRPCRequestData, timeout: number | undefined = 5000): Promise<any> {\n    const prom = this.transportRequestManager.addRequest(data, undefined);\n    if (!this.frame) {\n      return;\n    }\n    this.frame.postMessage((data as IJSONRPCData).request, this.uri);\n    return prom;\n  }\n\n  public close(): void {\n    if (this.frame) {\n      this.frame.close();\n    }\n  }\n\n}\n\nexport default PostMessageWindowTransport;\n","import { createMachine, assign } from \"xstate\";\nimport sigToolsClient from \"../lib/sigToolsClient\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport { numberToHex, bigIntToHex, stringToHex } from \"@etclabscore/eserialize\";\nimport { Page } from \"puppeteer\";\n\nconst SIG_TOOLS_URL = \"https://sig.tools\";\n\nexport interface IContext {\n  chainId?: string;\n  erpc?: EthereumJSONRPC;\n  etherValue: string;\n  inProgress: boolean;\n  accounts: any[];\n  transaction: null | string;\n  fields: {\n    receiver: null | string,\n    amount: null | string,\n  };\n}\nexport const rawAppMachine = {\n  id: \"appMachine\",\n  initial: \"idle\",\n  context: {\n    etherValue: \"1\",\n    erpc: undefined,\n    transaction: null,\n    inProgress: false,\n    accounts: [],\n    fields: {\n      receiver: null,\n      amount: null,\n    },\n  },\n  on: {\n    ERPC: [\n      {\n        target: \"fetchingChainId\",\n        actions: assign({\n          erpc: (context: any, event: any) => {\n            return event.erpc;\n          },\n        }),\n      },\n    ],\n    SEND: {\n      target: \"sendTransaction\",\n    },\n    SIGN: {\n      target: \"signMessage\",\n    },\n    SIGN_TYPED_DATA: {\n      target: \"signTypedData\",\n    },\n    CONNECT: {\n      target: \"connecting\",\n    },\n  },\n  states: {\n    idle: {\n      meta: {\n        test: async (page: Page) => {\n          return true;\n        },\n      }\n    },\n    connecting: {\n      meta: {\n        test: async (page: Page) => {\n          await page.waitFor('[data-testid=\"connecting\"]');\n        },\n      },\n      invoke: {\n        id: \"connecting.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          await sigToolsClient.connect(SIG_TOOLS_URL);\n          await sigToolsClient.requestPermissions({\n            listAccounts: {},\n          });\n        },\n        onDone: {\n          target: \"fetchingAccounts\",\n        },\n        onError: \"idle\",\n      },\n    },\n    fetchingAccounts: {\n      meta: {\n        test: async (page: Page) => {\n          return true;\n        },\n      },\n      invoke: {\n        id: \"fetchingAccounts.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          const accounts = await sigToolsClient.listAccounts();\n          if (!context.erpc) {\n            return accounts;\n          }\n          const blockNumber = await context.erpc?.eth_blockNumber();\n          const ps = accounts.map(async (account: any) => {\n            const balance = await context.erpc?.eth_getBalance(account.address, blockNumber);\n            return {\n              ...account,\n              balance,\n            };\n          });\n          return Promise.all(ps);\n        },\n        onDone: {\n          target: \"idle\",\n          actions: assign({ accounts: (context, event: any) => event.data }),\n        },\n        onError: \"idle\",\n      },\n    },\n    fetchingChainId: {\n      meta: {\n        test: async (page: Page) => {\n          return true;\n        },\n      },\n      invoke: {\n        id: \"fetchingChainId.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          const chainId = await context.erpc?.eth_chainId();\n          return chainId;\n        },\n        onDone: {\n          target: \"fetchingAccounts\",\n          actions: assign({ chainId: (context, event: any) => event.data }),\n        },\n        onError: \"idle\",\n      },\n    },\n    signTypedData: {\n      meta: {\n        test: async (page: Page) => {\n          return true;\n        },\n      },\n      invoke: {\n        id: \"signTypedData.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          if (context.chainId) {\n            const typedData = {\n              types: {\n                EIP712Domain: [\n                  {\n                    name: \"name\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"version\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"chainId\",\n                    type: \"uint256\",\n                  },\n                  {\n                    name: \"verifyingContract\",\n                    type: \"address\",\n                  },\n                ],\n                Person: [\n                  {\n                    name: \"name\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"wallet\",\n                    type: \"address\",\n                  },\n                ],\n                Mail: [\n                  {\n                    name: \"from\",\n                    type: \"Person\",\n                  },\n                  {\n                    name: \"to\",\n                    type: \"Person\",\n                  },\n                  {\n                    name: \"contents\",\n                    type: \"string\",\n                  },\n                ],\n              },\n              primaryType: \"Mail\",\n              domain: {\n                name: \"Ether Mail\",\n                version: \"1\",\n                chainId: 1,\n                verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n              },\n              message: {\n                from: {\n                  name: event.name,\n                  wallet: event.address,\n                },\n                to: {\n                  name: \"Bob\",\n                  wallet: \"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\n                },\n                contents: \"Hello, Bob!\",\n              },\n            };\n            const signedMessage = await sigToolsClient.signTypedData(typedData, event.address, context.chainId || \"\");\n            return signedMessage;\n          }\n        },\n        onDone: {\n          target: \"idle\",\n          actions: assign({ signedTypedData: (context, event: any) => event.data }),\n        },\n        onError: \"idle\",\n      },\n    },\n    signMessage: {\n      meta: {\n        test: async (page: Page) => {\n          return true;\n        },\n      },\n      invoke: {\n        id: \"signMessage.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          if (context.chainId) {\n            const signedMessage = await sigToolsClient.sign(stringToHex(\"hello\"), event.address, context.chainId || \"\");\n            return signedMessage;\n          }\n        },\n        onDone: {\n          target: \"idle\",\n          actions: assign({ signedMessage: (context, event: any) => event.data }),\n        },\n        onError: \"idle\",\n      },\n    },\n    sendTransaction: {\n      meta: {\n        test: async (page: Page) => {\n          return true;\n        },\n      },\n      invoke: {\n        id: \"sendTransaction.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          if (context.chainId) {\n            const signedTransaction = await sigToolsClient.signTransaction({\n              from: event.address,\n              gas: numberToHex(22000),\n              value: bigIntToHex(BigInt(10000000000000000)),\n              gasPrice: await context.erpc?.eth_gasPrice(),\n              nonce: await context.erpc?.eth_getTransactionCount(event.address, await context.erpc?.eth_blockNumber()),\n            }, context.chainId || \"\");\n            return context.erpc?.eth_sendRawTransaction(signedTransaction).then(() => signedTransaction).catch((e) => {\n              return signedTransaction;\n            });\n          }\n        },\n        onDone: {\n          target: \"idle\",\n          actions: assign({ signedTransaction: (context, event: any) => event.data }),\n        },\n        onError: \"idle\",\n      },\n    },\n    // wrapping: {\n    //   after: {\n    //     30000: \"idle\",\n    //   },\n    //   invoke: {\n    //     id: \"wrapping.sig.tools\",\n    //     src: async (context: IContext, event: any) => {\n    //       if (!context.erpc) {\n    //         throw new Error(\"RPC not connected\");\n    //       }\n    //       const chainId = await context.erpc.eth_chainId();\n    //       const connected = await sigToolsClient.connect(\"https://sig.tools\");\n    //       const blockNumber = await context.erpc.eth_blockNumber();\n    //       const rawTransaction = await sigToolsClient.signTransaction({\n    //         from: context.accounts[0].address,\n    //         value: bigIntToHex(BigInt(context.etherValue)),\n    //         to: CONTRACT_ADDRESS,\n    //         nonce: await context.erpc.eth_getTransactionCount(context.accounts[0].address, blockNumber),\n    //         gasPrice: numberToHex(0),\n    //         gas: numberToHex(310000),\n    //         data: \"0x0\",\n    //       }, chainId);\n    //       return context.erpc.eth_sendRawTransaction(rawTransaction);\n    //     },\n    //     onDone: {\n    //       target: \"idle\",\n    //       actions: assign({ accounts: (context, event: any) => event.data }),\n    //     },\n    //     onError: \"idle\",\n    //   },\n    // },\n  },\n};\n\nconst appMachine = createMachine<any, any, any>(rawAppMachine);\n\n// Machine instance with internal state\nexport default appMachine;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport JadeServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport React, { useState, Dispatch } from \"react\";\n\nconst serviceName = \"core-geth\";\n\nfunction useCoreGeth(\n  serviceRunner: JadeServiceRunner | undefined,\n  serviceRunnerUrl: string,\n  version: string,\n  env: string,\n  queryUrlOverride?: string,\n): [ERPC | undefined, Dispatch<string>] {\n  const [erpc, setErpc] = React.useState<undefined | ERPC>();\n  const [urlOverride, setUrlOverride] = useState(queryUrlOverride || process.env.REACT_APP_ETH_RPC_URL);\n  React.useEffect(() => {\n    const runAsync = async () => {\n      if (!urlOverride) {\n        if (!serviceRunner) {\n          return;\n        }\n        const installed = await serviceRunner.installService(serviceName, version);\n        if (!installed) {\n          return;\n        }\n        await serviceRunner.startService(serviceName, version, env);\n      }\n      let parsedUrl;\n      try {\n        parsedUrl = new URL(urlOverride || `${serviceRunnerUrl}/${serviceName}/${env}/${version}`);\n      } catch (e) {\n        return;\n      }\n      let rpc;\n      try {\n        const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n        const fallbackPort = protocol === \"http\" ? 80 : 443;\n        const port = parseInt(parsedUrl.port, 10);\n        rpc = new ERPC({\n          transport: {\n            host: parsedUrl.hostname,\n            port: port ? port : fallbackPort,\n            type: protocol,\n            path: parsedUrl.pathname,\n          },\n        });\n      } catch (e) {\n        return;\n      }\n      if (rpc) {\n        setErpc(rpc);\n      }\n    };\n    runAsync();\n    return () => {\n      if (erpc) {\n        erpc.rpc.requestManager.close();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [serviceRunner, serviceRunnerUrl, version, env, urlOverride, queryUrlOverride]);\n  return [erpc, setUrlOverride];\n}\n\nexport default useCoreGeth;\n","import JadeServiceRunner, { ObjectOfStringDoaGddGAStringDoaGddGAUnorderedSetOfObjectOfStringDoaGddGAStringDoaGddGAKieCSt44UIuKSje3U7AKQies as IAvailableServices } from \"@etclabscore/jade-service-runner-client\";\nimport React, { Dispatch, useEffect } from \"react\";\n\nfunction useServiceRunner(defaultUrl: string): [JadeServiceRunner | undefined, string, Dispatch<string>, IAvailableServices[]] { //tslint:disable-line\n  const [url, setUrl] = React.useState(defaultUrl);\n  const [serviceRunner, setServiceRunner] = React.useState<JadeServiceRunner | undefined>();\n  const [availableServices, setAvailableServices] = React.useState<IAvailableServices[]>([]);\n  React.useEffect(() => {\n    if (process.env.REACT_APP_ETH_RPC_URL) {\n      return;\n    }\n    if (!url) {\n      return;\n    }\n    let parsedUrl;\n    try {\n      parsedUrl = new URL(url);\n    } catch (e) {\n      return;\n    }\n    let rpc;\n    try {\n      const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n      const fallbackPort = protocol === \"http\" ? 80 : 443;\n      const port = parseInt(parsedUrl.port, 10);\n      rpc = new JadeServiceRunner({\n        transport: {\n          host: parsedUrl.hostname,\n          port: port ? port : fallbackPort,\n          type: protocol,\n        },\n      });\n    } catch (e) {\n      return;\n    }\n    if (rpc) {\n      setServiceRunner(rpc);\n    }\n    return () => {\n      if (serviceRunner) {\n        serviceRunner.rpc.requestManager.close();\n      }\n    };\n // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n  useEffect(() => {\n    if (serviceRunner) {\n      serviceRunner.listServices(\"available\").then(setAvailableServices);\n    }\n  }, [serviceRunner]);\n  return [serviceRunner, url, setUrl, availableServices];\n}\n\nexport default useServiceRunner;\n","import * as React from \"react\";\nimport { Menu, MenuItem, Tooltip, Button, Typography } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { TNetwork } from \"../lib/availableServiceToNetwork\";\n\ninterface IProps {\n  networks: TNetwork[];\n  selectedNetwork?: TNetwork;\n  setSelectedNetwork?: (network: TNetwork) => void;\n}\n\nconst NetworkDropdown: React.FC<IProps> = (props) => {\n  const { t } = useTranslation();\n  const { selectedNetwork, setSelectedNetwork } = props;\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (network: TNetwork) => {\n    setAnchorEl(null);\n    if (setSelectedNetwork) {\n      setSelectedNetwork(network);\n    }\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Tooltip title={t(\"Change Network\") as string}>\n        <Button onClick={handleClick}>\n          {selectedNetwork && selectedNetwork.name}\n        </Button>\n      </Tooltip>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {props.networks.map((network, i) => (\n          <MenuItem\n            selected={selectedNetwork && selectedNetwork.name === network.name}\n            onClick={(event) => handleMenuItemClick(network)}\n          >\n            <div>\n              <Typography variant=\"body1\">{network.name}</Typography>\n              <Typography variant=\"caption\">{network.summary}</Typography>\n            </div>\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default NetworkDropdown;\n","import {\n  ObjectOfStringDoaGddGAStringDoaGddGAUnorderedSetOfObjectOfStringDoaGddGAStringDoaGddGAKieCSt44UIuKSje3U7AKQies as IAvailableServices,\n  ObjectOfStringDoaGddGAStringDoaGddGAKieCSt44 as IEnvironment,\n} from \"@etclabscore/jade-service-runner-client\";\n\ninterface INetwork {\n  name: string;\n  url: string;\n  summary?: string;\n  [k: string]: any;\n}\n\nexport type TNetwork = INetwork;\n\nconst availableServiceToNetwork = (\n  availableServices: IAvailableServices[],\n  serviceRunnerUrl: string): TNetwork[] => {\n  const availNetworks = availableServices.map((availableService: IAvailableServices) => {\n    if (!availableService) {\n      return [];\n    }\n    if (!availableService.environments) {\n      return [];\n    }\n    return availableService.environments.map((env: IEnvironment) => {\n      return {\n        name: env.name,\n        url: `${serviceRunnerUrl}/${availableService.name}/${env.name}/${availableService.version}`,\n        service: availableService,\n        summary: env.summary,\n      };\n    });\n  });\n  return ([] as any).concat(...availNetworks);\n};\n\nexport default availableServiceToNetwork;\n","import React from \"react\";\nimport { Card, CardHeader, Typography, Button, CardContent } from \"@material-ui/core\";\nimport { hexToBigInt } from \"@etclabscore/eserialize\";\n\ninterface IProps {\n  onSend?: (account: any) => void;\n  onSign?: (account: any) => void;\n  onSignTypedData?: (account: any) => void;\n  account?: any;\n}\n\nconst Account: React.FC<IProps> = (props) => {\n  const handleSend = () => {\n    if (props.onSend) {\n      props.onSend(props.account);\n    }\n  };\n  const handleSign = () => {\n    if (props.onSign) {\n      props.onSign(props.account);\n    }\n  };\n  const handleSignTypedData = () => {\n    if (props.onSignTypedData) {\n      props.onSignTypedData(props.account);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader title={props.account.name} />\n      <CardContent>\n        <Typography variant=\"body1\">{props.account?.address}</Typography>\n        <Typography variant=\"body1\">{hexToBigInt(props.account?.balance ?? \"0x0\").toString()} ETC</Typography>\n        <span id=\"send\"><Button onClick={handleSend}>Send 1 Ether</Button></span>\n        <span id=\"sign\"><Button className=\"sign\" onClick={handleSign}>Sign \"Hello\"</Button></span>\n        <span id=\"signtypeddata\"><Button className=\"signtypeddata\" onClick={handleSignTypedData}>SignTypedData</Button></span>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Account;\n","import React, { useState, useEffect } from \"react\";\nimport { ObjectOfStringDoaGddGAStringDoaGddGAUnorderedSetOfObjectOfStringDoaGddGAStringDoaGddGAKieCSt44UIuKSje3U7AKQies as IAvailableServices } from \"@etclabscore/jade-service-runner-client\";\nimport { MuiThemeProvider, AppBar, Toolbar, Typography, IconButton, Tooltip, CssBaseline, Grid, Button, CardHeader, CardContent, Card } from \"@material-ui/core\"; //tslint:disable-line\nimport useDarkMode from \"use-dark-mode\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport { lightTheme, darkTheme } from \"../themes/theme\";\nimport { useTranslation } from \"react-i18next\";\nimport LanguageMenu from \"./LanguageMenu\";\nimport { useMachine } from \"@xstate/react\";\n\nimport \"./MyApp.css\";\nimport appMachine, { IContext } from \"../machines/appMachine\";\nimport useCoreGeth from \"../hooks/useCoreGeth\";\nimport ServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport useServiceRunner from \"../hooks/useServiceRunner\";\nimport NetworkDropdown from \"../components/NetworkDropdown\";\nimport availableServiceToNetwork from \"../lib/availableServiceToNetwork\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\nimport Account from \"../components/Account\";\n\nconst MyApp: React.FC = () => {\n  const darkMode = useDarkMode();\n  const { t } = useTranslation();\n  const theme = darkMode.value ? darkTheme : lightTheme;\n  const [selectedNetwork, setSelectedNetworkState] = useState();\n  const [serviceRunner, serviceRunnerUrl, , availableServices]: [ServiceRunner | undefined, string, any, IAvailableServices[]] = useServiceRunner(process.env.REACT_APP_SERVICE_RUNNER_URL || \"https://services.jade.builders\"); //tslint:disable-line\n  const [erpc, setCoreGethUrlOverride] = useCoreGeth(serviceRunner, serviceRunnerUrl, \"1.11.17\", \"mainnet\");\n  const [state, send]: [any, any, any] = useMachine<IContext, any>(appMachine, { devTools: true }); //tslint:disable-line\n  const [networks, setNetworks] = useState<any[]>([]);\n\n  const setSelectedNetwork = async (network: any) => {\n    if (serviceRunner) {\n      setSelectedNetworkState(network);\n      if (network.service) {\n        await serviceRunner.installService(network.service.name, network.service.version);\n        await serviceRunner.startService(network.service.name, network.service.version, network.name);\n      }\n    }\n    setCoreGethUrlOverride(network.url);\n  };\n\n  useEffect(() => {\n    if (availableServices && serviceRunnerUrl) {\n      const n = availableServiceToNetwork(availableServices, serviceRunnerUrl);\n      setNetworks(n);\n    }\n  }, [availableServices, serviceRunnerUrl]);\n\n  useEffect(() => {\n    send(\"ERPC\", { erpc });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [erpc]);\n\n  useEffect(() => {\n    if (!networks || networks.length === 0) {\n      return;\n    }\n    setSelectedNetworkState(networks[0]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [networks]);\n\n  const handleSignTypedData = (account: any) => {\n    send(\"SIGN_TYPED_DATA\", { ...account });\n  };\n\n  const handleSign = (account: any) => {\n    send(\"SIGN\", { ...account });\n  };\n\n  const handleSend = (account: any) => {\n    send(\"SEND\", { ...account });\n  };\n\n  const handleConnect = () => {\n    send(\"CONNECT\");\n  };\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <AppBar position=\"sticky\" color=\"default\" elevation={0}>\n        <Toolbar>\n          <Grid container alignContent=\"center\" alignItems=\"center\" justify=\"space-between\">\n            <Typography variant=\"h6\">{t(\"Test Dapp\")}</Typography>\n            <Typography variant=\"caption\">\n              <Typography>Chain ID: {state.context.chainId ? hexToNumber(state.context.chainId) : null}</Typography>\n            </Typography>\n            <Grid item>\n              <NetworkDropdown\n                networks={networks}\n                setSelectedNetwork={setSelectedNetwork}\n                selectedNetwork={selectedNetwork}\n              />\n              <LanguageMenu />\n              <Tooltip title={t(\"Toggle Dark Mode\") as string}>\n                <IconButton onClick={darkMode.toggle}>\n                  {darkMode.value ? <Brightness3Icon /> : <WbSunnyIcon />}\n                </IconButton>\n              </Tooltip>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n      <div>\n        <CssBaseline />\n        <div id={state.value} data-testid={state.value}/>\n        <Grid container alignContent=\"center\" justify=\"space-around\" direction=\"row\">\n          <Grid>\n            {state.matches(\"connecting\") && <Button data-testid=\"connecting\">Connecting...</Button>}\n            {<Button\n              id=\"connect\"\n              variant=\"contained\"\n              onClick={handleConnect}>\n              Connect to <b><span role=\"img\" aria-label=\"key-lock-logo\">🔐</span>sig.tools</b>\n            </Button>}\n            <Card>\n              <CardHeader title=\"Accounts\" />\n              <CardContent>\n                {state.context.accounts && state.context.accounts.map((account: any) =>\n                  <Account\n                    onSignTypedData={handleSignTypedData}\n                    onSend={handleSend}\n                    onSign={handleSign}\n                    account={account}\n                    key={account.address}\n                  />,\n                )\n                }\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid>\n            <Card style={{ height: \"100px\", width: \"300px\" }}>\n              <Typography>Signed Transaction</Typography>\n              <pre style={{ overflowX: \"auto\" }}>\n                <code>\n                  {state.context.signedTransaction}\n                </code>\n              </pre>\n            </Card>\n            <Card style={{ height: \"100px\", width: \"300px\" }}>\n              <Typography>Signed Message</Typography>\n              <pre style={{ overflowX: \"auto\" }}>\n                <code>\n                  {state.context.signedMessage}\n                </code>\n              </pre>\n            </Card>\n            <Card style={{ height: \"100px\", width: \"300px\" }}>\n              <Typography>Signed Typed Data</Typography>\n              <pre style={{ overflow: \"auto\" }}>\n                <code>\n                  {JSON.stringify(state.context.signedTypedData, null, 4)}\n                </code>\n              </pre>\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n    </MuiThemeProvider >\n  );\n};\n\nexport default MyApp;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport MyApp from \"./containers/MyApp\";\n\nReactDOM.render(<MyApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}