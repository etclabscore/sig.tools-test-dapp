{"version":3,"sources":["themes/theme.ts","i18n.ts","translations/en.ts","translations/kr.ts","translations/cn.ts","containers/LanguageMenu/index.tsx","containers/LanguageMenu/LanguageMenu.tsx","lib/postMessageWindowTransport.ts","lib/sigToolsClient.ts","machines/appMachine.ts","hooks/useCoreGeth.ts","hooks/useServiceRunner.ts","components/NetworkDropdown.tsx","lib/availableServiceToNetwork.ts","components/Account.tsx","containers/MyApp.tsx","index.tsx"],"names":["lightTheme","createMuiTheme","props","MuiAppBar","position","MuiCard","elevation","overrides","root","background","palette","default","darkTheme","type","grey","paper","MuiTable","MuiTypography","color","momentMap","i18n","use","LanguageDetector","initReactI18next","init","resources","en","translation","kr","cn","interpolation","escapeValue","format","value","lng","ln","moment","locale","reverseSupportedLanguages","supportedLanguages","LanguageMenu","useTranslation","t","React","anchorEl","setAnchorEl","Tooltip","title","Button","onClick","event","currentTarget","language","Menu","id","keepMounted","open","Boolean","onClose","Object","values","map","lang","i","MenuItem","changeLanguage","handleMenuItemClick","transport","PostMessageWindowTransport","uri","window","frame","urlRegex","Promise","resolve","reject","test","Error","url","height","screen","openPopup","addEventListener","ev","origin","transportRequestManager","resolveResponse","JSON","stringify","data","setTimeout","prom","this","addRequest","undefined","postMessage","request","close","Transport","sigToolsAuth","connect","sign","dataToSign","address","chainId","a","signMessageID","sendData","internalID","jsonrpc","method","params","result","signTypedData","typedData","signTransaction","transaction","signTransactionID","requestPermissions","permissions","requestPermissionID","successPermissions","listAccounts","listAccountsID","accounts","rawAppMachine","initial","context","etherValue","erpc","inProgress","fields","receiver","amount","on","ERPC","target","actions","assign","SEND","SIGN","SIGN_TYPED_DATA","CONNECT","states","idle","connecting","meta","page","waitFor","invoke","src","sigToolsClient","onDone","onError","fetchingAccounts","eth_blockNumber","blockNumber","ps","account","eth_getBalance","balance","all","fetchingChainId","eth_chainId","connected","types","EIP712Domain","name","Person","Mail","primaryType","domain","version","verifyingContract","message","from","wallet","to","contents","signedMessage","signedTypedData","signMessage","stringToHex","sendTransaction","numberToHex","bigIntToHex","BigInt","eth_gasPrice","eth_getTransactionCount","gas","gasPrice","nonce","signedTransaction","eth_sendRawTransaction","then","catch","e","appMachine","createMachine","useCoreGeth","serviceRunner","serviceRunnerUrl","env","queryUrlOverride","useState","setErpc","process","REACT_APP_ETH_RPC_URL","urlOverride","setUrlOverride","useEffect","installService","startService","parsedUrl","URL","protocol","split","fallbackPort","port","parseInt","rpc","host","hostname","path","pathname","runAsync","requestManager","useServiceRunner","defaultUrl","setUrl","setServiceRunner","availableServices","setAvailableServices","useQueryParam","StringParam","rpcUrlQuery","JadeServiceRunner","listServices","NetworkDropdown","selectedNetwork","setSelectedNetwork","networks","network","selected","Typography","variant","summary","availableServiceToNetwork","availNetworks","availableService","environments","service","concat","Account","Card","CardHeader","CardContent","hexToBigInt","toString","onSend","onSign","onSignTypedData","MyApp","darkMode","useDarkMode","theme","setSelectedNetworkState","REACT_APP_SERVICE_RUNNER_URL","setCoreGethUrlOverride","useMachine","devTools","state","send","setNetworks","useQueryParams","rpcUrl","query","n","length","foundNetwork","find","net","handleSignTypedData","handleSign","handleSend","AppBar","Toolbar","Grid","container","alignContent","alignItems","justify","hexToNumber","item","IconButton","toggle","CssBaseline","direction","matches","disabled","role","aria-label","key","style","width","overflowX","overflow","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.309b0ae8.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const lightTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"#fff !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  palette: {\n    type: \"dark\",\n    background: {\n      default: grey[900],\n      paper: grey[800],\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: grey[400],\n      },\n    },\n  },\n});\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport enJSON from \"./translations/en\";\nimport krJSON from \"./translations/kr\";\nimport cnJSON from \"./translations/cn\";\nimport moment from \"moment\";\nimport \"moment/locale/ko\";\nimport \"moment/locale/zh-cn\";\nimport \"moment/locale/en-ca\";\nimport i18next from \"i18next\";\n\ninterface IMap {\n  [key: string]: string;\n}\n\nconst momentMap: IMap = {\n  \"kr\": \"ko\",\n  \"cn\": \"zh-cn\",\n  \"en-US\": \"en-ca\",\n};\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources: {\n      en: { translation: enJSON },\n      kr: { translation: krJSON },\n      cn: { translation: cnJSON },\n    },\n    interpolation: {\n      escapeValue: false,\n      format: (value, format, lng) => {\n        if (!lng) {\n          return;\n        }\n        const ln = momentMap[lng];\n        switch (format) {\n          case \"date\":\n            return moment(value).locale(ln || \"en\").format(\"MMMM Do YYYY, h:mm:ss a\") as any;\n          default:\n            break;\n        }\n      },\n    },\n  });\n\nexport const reverseSupportedLanguages: IMap = {\n  \"EN\": \"en-US\", //tslint:disable-line\n  \"中文\": \"cn\", //tslint:disable-line\n  \"한국어\": \"kr\", //tslint:disable-line\n};\n\nexport const supportedLanguages: IMap = {\n  \"en-US\": \"EN\",\n  \"cn\": \"中文\",\n  \"kr\": \"한국어\",\n};\n\nexport const changeLanguage = (l: string) => {\n  return i18next.changeLanguage(l);\n};\n","export default {\n  // Moment integration\n  \"Date\": \"{{date, date}}\",\n  // App Bar\n  \"Pristine\": \"Pristine\",\n  \"Change Language\": \"Change Language\",\n  \"Toggle Dark Mode\": \"Toggle Dark Mode\",\n  \"Configuration\": \"Configuration\",\n  \"Back\": \"Back\",\n};\n","export default {\n  // Moment integration\n  \"Date\": \"{{date, date}}\",\n  // App Bar\n  \"Pristine\": \"Pristine\",\n  \"Change Language\": \"언어 변경\",\n  \"Toggle Dark Mode\": \"블랙모드 변경\",\n  \"Configuration\": \"구성\",\n  \"Back\": \"뒤로\",\n};\n","export default {\n  // Moment integration\n  \"Date\": \"{{date, date}}\",\n  // App Bar\n  \"Pristine\": \"Pristine\",\n  \"Change Language\": \"更改语言\",\n  \"Toggle Dark Mode\": \"切换黑暗模式\",\n  \"Configuration\": \"配置\",\n  \"Back\": \"返回\",\n};\n","import LanguageMenu from \"./LanguageMenu\";\nexport default LanguageMenu;\n","import * as React from \"react\";\nimport { Menu, MenuItem, Tooltip, Button } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { supportedLanguages, reverseSupportedLanguages } from \"../../i18n\";\n\nconst LanguageMenu: React.FC = (props) => {\n  const { t, i18n } = useTranslation();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (lang: string) => {\n    setAnchorEl(null);\n    // this forces language change for react + i18n react\n    i18n.changeLanguage(reverseSupportedLanguages[lang]);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Tooltip title={t(\"Change Language\")}>\n        <Button onClick={handleClick}>{supportedLanguages[i18n.language]}</Button>\n      </Tooltip>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {Object.values(supportedLanguages).map((lang, i) => (\n          <MenuItem onClick={(event) => handleMenuItemClick(lang)}>{lang}</MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default LanguageMenu;\n","import { Transport } from \"@open-rpc/client-js/build/transports/Transport\";\nimport { JSONRPCRequestData, IJSONRPCData } from \"@open-rpc/client-js/build/Request\";\n\nconst openPopup = (url: string) => {\n  const width = 400;\n  const height = window.screen.height;\n  const left = 0;\n  const top = 0;\n\n  return window.open(\n    url,\n    \"inspector:popup\",\n    `left=${left},top=${top},width=${width},height=${height},resizable,scrollbars=yes,status=1`,\n  );\n};\n\nclass PostMessageWindowTransport extends Transport {\n  public uri: string;\n  public window: any;\n  public frame: undefined | null | Window;\n\n  constructor(uri: string) {\n    super();\n    this.uri = uri;\n  }\n  public connect(): Promise<any> {\n    const urlRegex = /^(http|https):\\/\\/.*$/;\n    return new Promise((resolve, reject) => {\n      if (!urlRegex.test(this.uri)) {\n        reject(new Error(\"Bad URI\"));\n      }\n      this.frame = openPopup(this.uri);\n      window.addEventListener(\"message\", (ev: MessageEvent) => {\n        if (ev.origin === window.origin) {\n          return;\n        }\n        this.transportRequestManager.resolveResponse(JSON.stringify(ev.data));\n      });\n      setTimeout(() => {\n        resolve(true);\n      }, 3000);\n    });\n  }\n\n  public async sendData(data: JSONRPCRequestData, timeout: number | undefined = 5000): Promise<any> {\n    const prom = this.transportRequestManager.addRequest(data, undefined);\n    if (!this.frame) {\n      return;\n    }\n    this.frame.postMessage((data as IJSONRPCData).request, this.uri);\n    return prom;\n  }\n\n  public close(): void {\n    if (this.frame) {\n      this.frame.close();\n    }\n  }\n\n}\n\nexport default PostMessageWindowTransport;\n","\nimport PostMessageWindowTransport from \"./postMessageWindowTransport\";\n\nlet transport: PostMessageWindowTransport | undefined;\nlet id = 0;\n\nconst sigToolsAuth = {\n  connect: (url: string) => {\n    transport = new PostMessageWindowTransport(url);\n    return transport.connect();\n  },\n  close: () => {\n    transport?.close();\n  },\n  sign: async (dataToSign: string, address: string, chainId: string) => {\n    const signMessageID = id++;\n    const result = await transport?.sendData({\n      internalID: signMessageID,\n      request: {\n        id: signMessageID,\n        jsonrpc: \"2.0\",\n        method: \"sign\",\n        params: [\n          dataToSign,\n          address,\n          chainId,\n        ],\n      } as any,\n    });\n    return result;\n  },\n  signTypedData: async (typedData: any, address: string, chainId: string) => {\n    const signMessageID = id++;\n    const result = await transport?.sendData({\n      internalID: signMessageID,\n      request: {\n        id: signMessageID,\n        jsonrpc: \"2.0\",\n        method: \"signTypedData\",\n        params: [\n          typedData,\n          address,\n          chainId,\n        ],\n      } as any,\n    });\n    return result;\n  },\n  signTransaction: async (transaction: any, chainId: string) => {\n    const signTransactionID = id++;\n    const result = await transport?.sendData({\n      internalID: signTransactionID,\n      request: {\n        id: signTransactionID,\n        jsonrpc: \"2.0\",\n        method: \"signTransaction\",\n        params: [\n          transaction,\n          chainId,\n        ],\n      } as any,\n    });\n    return result;\n  },\n  requestPermissions: async (permissions: any) => {\n    const requestPermissionID = id++;\n    const successPermissions = await transport?.sendData({\n      internalID: requestPermissionID,\n      request: {\n        id: requestPermissionID,\n        jsonrpc: \"2.0\",\n        method: \"requestPermissions\",\n        params: [permissions],\n      } as any,\n    });\n    return successPermissions;\n  },\n  listAccounts: async () => {\n    const listAccountsID = id++;\n    const accounts = await transport?.sendData({\n      internalID: listAccountsID,\n      request: {\n        id: listAccountsID,\n        jsonrpc: \"2.0\",\n        method: \"listAccounts\",\n        params: [],\n      } as any,\n    });\n    return accounts;\n  },\n};\n\nexport default sigToolsAuth;\n","import { createMachine, assign } from \"xstate\";\nimport sigToolsClient from \"../lib/sigToolsClient\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\nimport { numberToHex, bigIntToHex, stringToHex } from \"@etclabscore/eserialize\";\nimport { Page } from \"puppeteer\";\n\nconst SIG_TOOLS_URL = \"https://sig.tools\";\n\nexport interface IContext {\n  chainId?: string;\n  erpc?: EthereumJSONRPC;\n  etherValue: string;\n  inProgress: boolean;\n  accounts: any[];\n  transaction: null | string;\n  fields: {\n    receiver: null | string,\n    amount: null | string,\n  };\n}\nexport const rawAppMachine = {\n  id: \"appMachine\",\n  initial: \"idle\",\n  context: {\n    etherValue: \"1\",\n    erpc: undefined,\n    transaction: null,\n    inProgress: false,\n    accounts: [],\n    fields: {\n      receiver: null,\n      amount: null,\n    },\n  },\n  on: {\n    ERPC: [\n      {\n        target: \"fetchingChainId\",\n        actions: assign({\n          erpc: (context: any, event: any) => {\n            return event.erpc;\n          },\n        }),\n      },\n    ],\n    SEND: {\n      target: \"sendTransaction\",\n    },\n    SIGN: {\n      target: \"signMessage\",\n    },\n    SIGN_TYPED_DATA: {\n      target: \"signTypedData\",\n    },\n    CONNECT: {\n      target: \"connecting\",\n    },\n  },\n  states: {\n    idle: {\n\n    },\n    connecting: {\n      meta: {\n        test: async (page: Page) => {\n          await page.waitFor(\"#connecting\");\n        },\n      },\n      invoke: {\n        id: \"connecting.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          await sigToolsClient.connect(SIG_TOOLS_URL);\n          await sigToolsClient.requestPermissions({\n            listAccounts: {},\n          });\n        },\n        onDone: {\n          target: \"fetchingAccounts\",\n        },\n        onError: \"idle\",\n      },\n    },\n    fetchingAccounts: {\n      invoke: {\n        id: \"fetchingAccounts.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          const accounts = await sigToolsClient.listAccounts();\n          if (!context.erpc) {\n            return accounts;\n          }\n          const blockNumber = await context.erpc?.eth_blockNumber();\n          const ps = accounts.map(async (account: any) => {\n            const balance = await context.erpc?.eth_getBalance(account.address, blockNumber);\n            return {\n              ...account,\n              balance,\n            };\n          });\n          return Promise.all(ps);\n        },\n        onDone: {\n          target: \"idle\",\n          actions: assign({ accounts: (context, event: any) => event.data }),\n        },\n        onError: \"idle\",\n      },\n    },\n    fetchingChainId: {\n      invoke: {\n        id: \"fetchingChainId.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          const chainId = await context.erpc?.eth_chainId();\n          return chainId;\n        },\n        onDone: {\n          target: \"fetchingAccounts\",\n          actions: assign({ chainId: (context, event: any) => event.data }),\n        },\n        onError: \"idle\",\n      },\n    },\n    connected: {\n      meta: {\n        test: async (page: Page) => {\n          await page.waitFor(\"#connected\");\n        },\n      },\n    },\n    signTypedData: {\n      invoke: {\n        id: \"signTypedData.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          if (context.chainId) {\n            const typedData = {\n              types: {\n                EIP712Domain: [\n                  {\n                    name: \"name\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"version\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"chainId\",\n                    type: \"uint256\",\n                  },\n                  {\n                    name: \"verifyingContract\",\n                    type: \"address\",\n                  },\n                ],\n                Person: [\n                  {\n                    name: \"name\",\n                    type: \"string\",\n                  },\n                  {\n                    name: \"wallet\",\n                    type: \"address\",\n                  },\n                ],\n                Mail: [\n                  {\n                    name: \"from\",\n                    type: \"Person\",\n                  },\n                  {\n                    name: \"to\",\n                    type: \"Person\",\n                  },\n                  {\n                    name: \"contents\",\n                    type: \"string\",\n                  },\n                ],\n              },\n              primaryType: \"Mail\",\n              domain: {\n                name: \"Ether Mail\",\n                version: \"1\",\n                chainId: 1,\n                verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n              },\n              message: {\n                from: {\n                  name: event.name,\n                  wallet: event.address,\n                },\n                to: {\n                  name: \"Bob\",\n                  wallet: \"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\n                },\n                contents: \"Hello, Bob!\",\n              },\n            };\n            const signedMessage = await sigToolsClient.signTypedData(typedData, event.address, context.chainId || \"\");\n            return signedMessage;\n          }\n        },\n        onDone: {\n          target: \"idle\",\n          actions: assign({ signedTypedData: (context, event: any) => event.data }),\n        },\n        onError: \"idle\",\n      },\n    },\n    signMessage: {\n      invoke: {\n        id: \"signMessage.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          if (context.chainId) {\n            const signedMessage = await sigToolsClient.sign(stringToHex(\"hello\"), event.address, context.chainId || \"\");\n            return signedMessage;\n          }\n        },\n        onDone: {\n          target: \"idle\",\n          actions: assign({ signedMessage: (context, event: any) => event.data }),\n        },\n        onError: \"idle\",\n      },\n    },\n    sendTransaction: {\n      invoke: {\n        id: \"sendTransaction.sig.tools\",\n        src: async (context: IContext, event: any) => {\n          if (context.chainId) {\n            const signedTransaction = await sigToolsClient.signTransaction({\n              from: event.address,\n              gas: numberToHex(22000),\n              value: bigIntToHex(BigInt(10000000000000000)),\n              gasPrice: await context.erpc?.eth_gasPrice(),\n              nonce: await context.erpc?.eth_getTransactionCount(event.address, await context.erpc?.eth_blockNumber()),\n            }, context.chainId || \"\");\n            return context.erpc?.eth_sendRawTransaction(signedTransaction).then(() => signedTransaction).catch((e) => {\n              return signedTransaction;\n            });\n          }\n        },\n        onDone: {\n          target: \"idle\",\n          actions: assign({ signedTransaction: (context, event: any) => event.data }),\n        },\n        onError: \"idle\",\n      },\n    },\n    // wrapping: {\n    //   after: {\n    //     30000: \"idle\",\n    //   },\n    //   invoke: {\n    //     id: \"wrapping.sig.tools\",\n    //     src: async (context: IContext, event: any) => {\n    //       if (!context.erpc) {\n    //         throw new Error(\"RPC not connected\");\n    //       }\n    //       const chainId = await context.erpc.eth_chainId();\n    //       const connected = await sigToolsClient.connect(\"https://sig.tools\");\n    //       const blockNumber = await context.erpc.eth_blockNumber();\n    //       const rawTransaction = await sigToolsClient.signTransaction({\n    //         from: context.accounts[0].address,\n    //         value: bigIntToHex(BigInt(context.etherValue)),\n    //         to: CONTRACT_ADDRESS,\n    //         nonce: await context.erpc.eth_getTransactionCount(context.accounts[0].address, blockNumber),\n    //         gasPrice: numberToHex(0),\n    //         gas: numberToHex(310000),\n    //         data: \"0x0\",\n    //       }, chainId);\n    //       return context.erpc.eth_sendRawTransaction(rawTransaction);\n    //     },\n    //     onDone: {\n    //       target: \"idle\",\n    //       actions: assign({ accounts: (context, event: any) => event.data }),\n    //     },\n    //     onError: \"idle\",\n    //   },\n    // },\n  },\n};\n\nconst appMachine = createMachine<any, any, any>(rawAppMachine);\n\n// Machine instance with internal state\nexport default appMachine;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport JadeServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport React, { useState, Dispatch } from \"react\";\n\nconst serviceName = \"core-geth\";\n\nfunction useCoreGeth(\n  serviceRunner: JadeServiceRunner | undefined,\n  serviceRunnerUrl: string,\n  version: string,\n  env: string,\n  queryUrlOverride?: string,\n): [ERPC | undefined, Dispatch<string>] {\n  const [erpc, setErpc] = React.useState<undefined | ERPC>();\n  const [urlOverride, setUrlOverride] = useState(queryUrlOverride || process.env.REACT_APP_ETH_RPC_URL);\n  React.useEffect(() => {\n    const runAsync = async () => {\n      if (!urlOverride) {\n        if (!serviceRunner) {\n          return;\n        }\n        const installed = await serviceRunner.installService(serviceName, version);\n        if (!installed) {\n          return;\n        }\n        await serviceRunner.startService(serviceName, version, env);\n      }\n      let parsedUrl;\n      try {\n        parsedUrl = new URL(urlOverride || `${serviceRunnerUrl}/${serviceName}/${env}/${version}`);\n      } catch (e) {\n        return;\n      }\n      let rpc;\n      try {\n        const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n        const fallbackPort = protocol === \"http\" ? 80 : 443;\n        const port = parseInt(parsedUrl.port, 10);\n        rpc = new ERPC({\n          transport: {\n            host: parsedUrl.hostname,\n            port: port ? port : fallbackPort,\n            type: protocol,\n            path: parsedUrl.pathname,\n          },\n        });\n      } catch (e) {\n        return;\n      }\n      if (rpc) {\n        setErpc(rpc);\n      }\n    };\n    runAsync();\n    return () => {\n      if (erpc) {\n        erpc.rpc.requestManager.close();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [serviceRunner, serviceRunnerUrl, version, env, urlOverride, queryUrlOverride]);\n  return [erpc, setUrlOverride];\n}\n\nexport default useCoreGeth;\n","import JadeServiceRunner, { ObjectT84Ta8SE as IAvailableServices } from \"@etclabscore/jade-service-runner-client\";\nimport React, { Dispatch, useEffect } from \"react\";\nimport { useQueryParam, StringParam } from \"use-query-params\";\n\nfunction useServiceRunner(defaultUrl: string): [JadeServiceRunner | undefined, string, Dispatch<string>, IAvailableServices[]] { //tslint:disable-line\n  const [url, setUrl] = React.useState(defaultUrl);\n  const [serviceRunner, setServiceRunner] = React.useState<JadeServiceRunner | undefined>();\n  const [availableServices, setAvailableServices] = React.useState<IAvailableServices[]>([]);\n  const [rpcUrlQuery] = useQueryParam(\"url\", StringParam);\n  React.useEffect(() => {\n    if (process.env.REACT_APP_ETH_RPC_URL || rpcUrlQuery) {\n      return;\n    }\n    if (!url) {\n      return;\n    }\n    let parsedUrl;\n    try {\n      parsedUrl = new URL(url);\n    } catch (e) {\n      return;\n    }\n    let rpc;\n    try {\n      const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n      const fallbackPort = protocol === \"http\" ? 80 : 443;\n      const port = parseInt(parsedUrl.port, 10);\n      rpc = new JadeServiceRunner({\n        transport: {\n          host: parsedUrl.hostname,\n          port: port ? port : fallbackPort,\n          type: protocol,\n        },\n      });\n    } catch (e) {\n      return;\n    }\n    if (rpc) {\n      setServiceRunner(rpc);\n    }\n    return () => {\n      if (serviceRunner) {\n        serviceRunner.rpc.requestManager.close();\n      }\n    };\n // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n  useEffect(() => {\n    if (serviceRunner) {\n      serviceRunner.listServices(\"available\").then(setAvailableServices);\n    }\n  }, [serviceRunner]);\n  return [serviceRunner, url, setUrl, availableServices];\n}\n\nexport default useServiceRunner;\n","import * as React from \"react\";\nimport { Menu, MenuItem, Tooltip, Button, Typography } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { TNetwork } from \"../lib/availableServiceToNetwork\";\n\ninterface IProps {\n  networks: TNetwork[];\n  selectedNetwork?: TNetwork;\n  setSelectedNetwork?: (network: TNetwork) => void;\n}\n\nconst NetworkDropdown: React.FC<IProps> = (props) => {\n  const { t } = useTranslation();\n  const { selectedNetwork, setSelectedNetwork } = props;\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (network: TNetwork) => {\n    setAnchorEl(null);\n    if (setSelectedNetwork) {\n      setSelectedNetwork(network);\n    }\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Tooltip title={t(\"Change Network\")}>\n        <Button onClick={handleClick}>\n          {selectedNetwork && selectedNetwork.name}\n        </Button>\n      </Tooltip>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {props.networks.map((network, i) => (\n          <MenuItem\n            selected={selectedNetwork && selectedNetwork.name === network.name}\n            onClick={(event) => handleMenuItemClick(network)}\n          >\n            <div>\n              <Typography variant=\"body1\">{network.name}</Typography>\n              <Typography variant=\"caption\">{network.summary}</Typography>\n            </div>\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default NetworkDropdown;\n","import {\n  ObjectT84Ta8SE as IAvailableServices,\n  ObjectDBzoJtf4 as IEnvironment,\n} from \"@etclabscore/jade-service-runner-client\";\n\ninterface INetwork {\n  name: string;\n  url: string;\n  summary?: string;\n  [k: string]: any;\n}\n\nexport type TNetwork = INetwork;\n\nconst availableServiceToNetwork = (\n  availableServices: IAvailableServices[],\n  serviceRunnerUrl: string): TNetwork[] => {\n  const availNetworks = availableServices.map((availableService: IAvailableServices) => {\n    if (!availableService) {\n      return [];\n    }\n    if (!availableService.environments) {\n      return [];\n    }\n    return availableService.environments.map((env: IEnvironment) => {\n      return {\n        name: env.name,\n        url: `${serviceRunnerUrl}/${availableService.name}/${env.name}/${availableService.version}`,\n        service: availableService,\n        summary: env.summary,\n      };\n    });\n  });\n  return ([] as any).concat(...availNetworks);\n};\n\nexport default availableServiceToNetwork;\n","import React from \"react\";\nimport { Card, CardHeader, Typography, Button, CardContent } from \"@material-ui/core\";\nimport { hexToBigInt } from \"@etclabscore/eserialize\";\n\ninterface IProps {\n  onSend?: (account: any) => void;\n  onSign?: (account: any) => void;\n  onSignTypedData?: (account: any) => void;\n  account?: any;\n}\n\nconst Account: React.FC<IProps> = (props) => {\n  const handleSend = () => {\n    if (props.onSend) {\n      props.onSend(props.account);\n    }\n  };\n  const handleSign = () => {\n    if (props.onSign) {\n      props.onSign(props.account);\n    }\n  };\n  const handleSignTypedData = () => {\n    if (props.onSignTypedData) {\n      props.onSignTypedData(props.account);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader title={Account.name} />\n      <CardContent>\n        <Typography variant=\"body1\">{props.account?.address}</Typography>\n        <Typography variant=\"body1\">{hexToBigInt(props.account?.balance ?? \"0x0\").toString()} ETC</Typography>\n        <Button onClick={handleSend}>Send 1 Ether</Button>\n        <Button onClick={handleSign}>Sign \"Hello\"</Button>\n        <Button onClick={handleSignTypedData}>SignTypedData</Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Account;\n","import React, { useState, useEffect } from \"react\";\nimport { ObjectT84Ta8SE as IAvailableServices } from \"@etclabscore/jade-service-runner-client\";\nimport { MuiThemeProvider, AppBar, Toolbar, Typography, IconButton, Tooltip, CssBaseline, Grid, Button, CardHeader, CardContent, Card } from \"@material-ui/core\"; //tslint:disable-line\nimport useDarkMode from \"use-dark-mode\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport { lightTheme, darkTheme } from \"../themes/theme\";\nimport { useTranslation } from \"react-i18next\";\nimport LanguageMenu from \"./LanguageMenu\";\nimport { useMachine } from \"@xstate/react\";\n\nimport \"./MyApp.css\";\nimport appMachine, { IContext } from \"../machines/appMachine\";\nimport useCoreGeth from \"../hooks/useCoreGeth\";\nimport ServiceRunner from \"@etclabscore/jade-service-runner-client\";\nimport useServiceRunner from \"../hooks/useServiceRunner\";\nimport NetworkDropdown from \"../components/NetworkDropdown\";\nimport availableServiceToNetwork from \"../lib/availableServiceToNetwork\";\nimport { useQueryParams, StringParam } from \"use-query-params\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\nimport Account from \"../components/Account\";\n\nconst MyApp: React.FC = () => {\n  const darkMode = useDarkMode();\n  const { t } = useTranslation();\n  const theme = darkMode.value ? darkTheme : lightTheme;\n  const [selectedNetwork, setSelectedNetworkState] = useState();\n  const [serviceRunner, serviceRunnerUrl,, availableServices]: [ServiceRunner | undefined, string, any, IAvailableServices[]] = useServiceRunner(process.env.REACT_APP_SERVICE_RUNNER_URL || \"https://services.jade.builders\"); //tslint:disable-line\n  const [erpc, setCoreGethUrlOverride] = useCoreGeth(serviceRunner, serviceRunnerUrl, \"1.11.2\", \"mainnet\");\n  const [state, send]: [any, any, any] = useMachine<IContext, any>(appMachine, { devTools: true }); //tslint:disable-line\n  const [networks, setNetworks] = useState<any[]>([]);\n  const [query] = useQueryParams({\n    network: StringParam,\n    rpcUrl: StringParam,\n  });\n\n  const setSelectedNetwork = async (network: any) => {\n    if (serviceRunner) {\n      setSelectedNetworkState(network);\n      if (network.service) {\n        await serviceRunner.installService(network.service.name, network.service.version);\n        await serviceRunner.startService(network.service.name, network.service.version, network.name);\n      }\n    }\n    setCoreGethUrlOverride(network.url);\n  };\n\n  useEffect(() => {\n    if (availableServices && serviceRunnerUrl) {\n      const n = availableServiceToNetwork(availableServices, serviceRunnerUrl);\n      setNetworks(n);\n    }\n  }, [availableServices, serviceRunnerUrl]);\n\n  useEffect(() => {\n    send(\"ERPC\", { erpc });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [erpc]);\n\n  useEffect(() => {\n    if (!networks || networks.length === 0) {\n      return;\n    }\n    if (query.rpcUrl) {\n      return;\n    }\n    if (networks && query.network) {\n      const foundNetwork = networks.find((net) => net.name === query.network);\n      setSelectedNetworkState(foundNetwork);\n    } else {\n      setSelectedNetworkState(networks[0]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [networks, query.network]);\n\n  const handleSignTypedData = (account: any) => {\n    send(\"SIGN_TYPED_DATA\", { ...account });\n  };\n\n  const handleSign = (account: any) => {\n    send(\"SIGN\", { ...account });\n  };\n\n  const handleSend = (account: any) => {\n    send(\"SEND\", { ...account });\n  };\n\n  const handleConnect = () => {\n    send(\"CONNECT\");\n  };\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <AppBar position=\"sticky\" color=\"default\" elevation={0}>\n        <Toolbar>\n          <Grid container alignContent=\"center\" alignItems=\"center\" justify=\"space-between\">\n            <Typography variant=\"h6\">{t(\"Test Dapp\")}</Typography>\n            <Typography variant=\"caption\">\n              <Typography>Chain ID: {state.context.chainId ? hexToNumber(state.context.chainId) : null}</Typography>\n            </Typography>\n            <Grid item>\n              <NetworkDropdown\n                networks={networks}\n                setSelectedNetwork={setSelectedNetwork}\n                selectedNetwork={selectedNetwork}\n              />\n              <LanguageMenu />\n              <Tooltip title={t(\"Toggle Dark Mode\")}>\n                <IconButton onClick={darkMode.toggle}>\n                  {darkMode.value ? <Brightness3Icon /> : <WbSunnyIcon />}\n                </IconButton>\n              </Tooltip>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n      <div>\n        <CssBaseline />\n        <div id={state.value} />\n        <Grid container alignContent=\"center\" justify=\"space-around\" direction=\"row\">\n          <Grid>\n            {state.matches(\"connecting\") && <Button disabled>Connecting...</Button>}\n            {<Button\n              id=\"connect\"\n              variant=\"contained\"\n              onClick={handleConnect}>\n              Connect to <b><span role=\"img\" aria-label=\"key-lock-logo\">🔐</span>sig.tools</b>\n            </Button>}\n            <Card>\n              <CardHeader title=\"Accounts\" />\n              <CardContent>\n                {state.context.accounts && state.context.accounts.map((account: any) =>\n                  <Account\n                    onSignTypedData={handleSignTypedData}\n                    onSend={handleSend}\n                    onSign={handleSign}\n                    account={account}\n                    key={account.address}\n                  />,\n                )\n                }\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid>\n            <Card style={{ height: \"100px\", width: \"300px\" }}>\n              <Typography>Signed Transaction</Typography>\n              <pre style={{ overflowX: \"auto\" }}>\n                <code>\n                  {state.context.signedTransaction}\n                </code>\n              </pre>\n            </Card>\n            <Card style={{ height: \"100px\", width: \"300px\" }}>\n              <Typography>Signed Message</Typography>\n              <pre style={{ overflowX: \"auto\" }}>\n                <code>\n                  {state.context.signedMessage}\n                </code>\n              </pre>\n            </Card>\n            <Card style={{ height: \"100px\", width: \"300px\" }}>\n              <Typography>Signed Typed Data</Typography>\n              <pre style={{ overflow: \"auto\" }}>\n                <code>\n                  {JSON.stringify(state.context.signedTypedData, null, 4)}\n                </code>\n              </pre>\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n    </MuiThemeProvider >\n  );\n};\n\nexport default MyApp;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport MyApp from \"./containers/MyApp\";\n\nReactDOM.render(<MyApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}